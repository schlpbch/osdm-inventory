openapi: 3.0.3
info:
  title: NOVA Inventory Booking API
  version: 1.0.0-rc5
  description: >-
    NOVA Inventory API to book places in a inventory
  contact:
    name: Andreas Schlapbach
    email: andreas.schlapbach@sbb.ch

tags:
  - name: availabilities
    description: >-
      availability of vehicle
paths:
  /availabilities:
    post:
      tags:
        - availabilities
      summary: returns availability of a vehicle
      description: >-
        Returns availability. The availability can be filtered using place properties or service levels.
      operationId: getAvailabilities
      parameters:
        # - $ref: "#/components/parameters/authorization"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
      requestBody:
        description: request for availability
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AvailabilityRequest"
      responses:
        "200":
          description: the requested place
          headers:
            Cache-Control:
              schema:
                type: string
                default: "public, max-age=10000"
                description: >-
                  A places resource is fairly persistent and has a medium time to live to allow short-term caching.
          content:
            application/json:
              schema:
                type: object
                properties:
                  warning:
                    $ref: "#/components/schemas/WarningMessageList"
                  availabilities:
                    $ref: "#/components/schemas/AvailabilityResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: unauthorized
        "403":
          description: forbidden
        "404":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "500":
          description: internal server error
        "501":
          description: not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

## Assumption: no scopes are used within this API
security:
  - oAuthNoScopes: []

components:
  securitySchemes:
    oAuthNoScopes:
      type: oauth2
      flows:
        implicit:
          # The token endpoint of the authorization server, needs to be specified here
          authorizationUrl: "https://login.microsoftonline.com/tbd" 
          scopes: {}
            
  parameters:
    # authorization:
    #   name: Authorization
    #   in: header
    #   description: >-
    #     OAuth2 token used to authenticate the consumer API. Refer to the implementation documentation
    #     for information on how to get a token.
    #   schema:
    #     type: string
    #   required: true

    acceptLanguage:
      name: Accept-Language
      in: header
      description: >-
        Describes the set of natural languages that are preferred for localized text in the response
        to the request (see RFC2616-sec14.4). Supporting English (en) is a must.
      schema:
        type: string
      required: false

    traceParent:
      name: traceparent
      in: header
      description: >-
        The traceparent header describes the position of the incoming request in its trace graph in a portable, 
        fixed-length format. Its design focuses on fast parsing. Every tracing tool MUST properly set 
        traceparent even when it only relies on vendor-specific information in tracestate (see W3C Trace Context).
      schema:
        type: string
      required: false

    traceState:
      name: tracestate
      in: header
      description:
        The tracestate extends traceparent with vendor-specific data represented by a set of name/value pairs.
        Storing information in tracestate is optional (see W3C Trace Context).
      schema:
        type: string
      required: false

  responses:
    BadRequestResponse:
      description: Bad Request (400)
      content:
        "application/problem+json":
          schema:
            $ref: "#/components/schemas/Problem"

    ConflictResponse:
      description: Conflict (409)
      content:
        "application/problem+json":
          schema:
            $ref: "#/components/schemas/Problem"

    InternalServerErrorResponse:
      description: Internal Server Error (500)
      content:
        "application/problem+json":
          schema:
            $ref: "#/components/schemas/Problem"

    ServiceUnavailableResponse:
      description: Service Unavailable (503)
      content:
        "application/problem+json":
          schema:
            $ref: "#/components/schemas/Problem"

  schemas:
    WarningMessageList:
      type: array
      items:
        type: object
        properties:
          code:
            type: string
          text:
            type: string
          elementList:
            type: array
            items:
              $ref: "#/components/schemas/Resource"
        description: >-
          This element can be used to pass non-blocking information or events,
          such as a price difference with the initially offered price at booking time.

    Resource:
      type: object
      description: used to represent a non-specified resource in the API.
      properties:
        id:
          type: string
          description: unique id of this resource on this server.
        title:
          type: string
          example: Bruxelles-Midi
        type:
          type: string
          enum:
            - MASTER_DATA
        href:
          type: string
          format: url
          example: "http://some.provider/location/2345"
      required:
        - id
        - title
        - type
        - href

    Problem:
      type: object
      description: >-
        Problem Details for HTTP APIs (RFC 7807) defines a "problem detail" as a way
        to carry machine-readable details of errors in a HTTP response to avoid
        the need to define new error response formats for HTTP APIs.
        See: https://tools.ietf.org/html/rfc7807
      properties:
        type:
          type: string
          format: uri
          description: >-
            An absolute URI that identifies the problem type. When dereferenced,
            it SHOULD provide human-readable documentation for the problem type
            (e.g., using HTML).
          default: "about:blank"
          example: "https://example.com/probs/passenger-too-young"
        title:
          type: string
          description: >-
            A short, summary of the problem type. Written in English and readable
            for engineers (usually not suited for non technical stakeholders and
            not localized); example: Service Unavailable
        status:
          type: integer
          format: int32
          description: >-
            The HTTP status code generated by the origin server for this occurrence
            of the problem.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
          example: 503
        detail:
          type: string
          description: >-
            A human readable explanation specific to this occurrence of the
            problem.
          example: Connection to database timed out
        instance:
          type: string
          format: uri
          description: >-
            An absolute URI that identifies the specific occurrence of the problem.


    ## end of product schema

    AvailabilityRequest:
      type: object
      required:
        - tripSpecifications
        - passengers
      properties:
        tripSpecifications:
          type: array
          items:
            $ref: "#/components/schemas/TripSpecification"
        requestedAccommodationSubType:
          description: >-
            Optional array of requested accommodation sub type such as EXPERIENCE.
            If omitted no filtering on accommodation sub types is performed.
          type: array
          items:
            $ref: "#/components/schemas/AccommodationSubType"
        requestedComfortClass:
          description:
            Optional array comfort classes to filter (FIRST_CLASS or SECOND_CLASS).
            If omitted no filtering
          type: array
          items:
            $ref: "#/components/schemas/ComfortClass"
        requestedPlaceProperties:
          description: >-
            Optional array of requested place properties such as WINDOW, TABLE,...
          type: array
          items:
            $ref: "#/components/schemas/PlaceProperty"
        passengers:
          type: array
          items:
            $ref: "#/components/schemas/Passenger"

    AvailabilityResponse:
      type: object
      required:
        - tripAvailabilities
      properties:
        tripAvailabilities:
          type: array
          items:
            $ref: "#/components/schemas/TripAvailability"

    TripAvailability:
      type: object
      description: >-
        Availability per leg for a given trip.
      required:
        - tripId
        - legAvailabilities
      properties:
        tripId:
          type: string
        legAvailabilities:
          type: array
          items:
            $ref: "#/components/schemas/TripLegAvailability"

    TripLegAvailability:
      type: object
      description: Availability per leg for a given trip.
      required:
        - legId
        - seqId
        - services
      properties:
        legId:
          type: string
        seqId:
          type: number
          format: int32
        services:
          type: array
          items:
            $ref: "#/components/schemas/ServiceAvailability"

    ##

    TripSpecification:
      type: object
      description: >-
        A minimal trip specification from origin to destination.
      required:
        - tripId
        - tripLegs
      properties:
        tripId:
          description: >-
            Id of this trip for referencing purposes. Unique within trip response.
          type: string
        tripLegs:
          description: Legs ot the trip with minimal information
          type: array
          items:
            $ref: "#/components/schemas/TripLegSpecification"
          minItems: 1

    TripLegSpecification:
      type: object
      description: >-
        A minimal simple trip leg specification consisting only of timed legs. Transfer legs 
        and continuous legs are not part of this specification as they are not relevant to find
        the correct vehicles by a pricing engine.
      required:
        - legId
        - seqId
      properties:
        legId:
          description: Id of this trip leg. Unique within trip result.
          type: string
        seqId: # EXT
          type: number
          format: int32
        timedLeg:
          $ref: "#/components/schemas/TimedLegSpecification"
        # transferLeg:
        #  $ref: "#/components/schemas/TransferLeg"
        # continousLeg:
        #   $ref: "#/components/schemas/ContinuousLeg"

    TimedLegSpecification: ## OJP # Reduced scope
      type: object
      description: >-
        A minimal leg specification.
      required:
        - legAlight
        - legBoard
        - service
      properties:
        legBoard: # EXT: use Place instead of LegBoard
          $ref: "#/components/schemas/LegStopSpecification"
        legIntermediates: # EXT: use Place instead of LegIntermediate
          type: array
          items:
            $ref: "#/components/schemas/LegStopSpecification"
        legAlight: # EXT: use Place instead of LegAlight
          $ref: "#/components/schemas/LegStopSpecification"
        service:
          $ref: "#/components/schemas/DatedJourneySpecification"

    LegStopSpecification: ## EXT OJP LegStop unifies LegBoard, LegIntermediate, LegAlign
      type: object
      description: >-
        A minimal leg stop specification indicating the time and place where the vehicle starts.
      required:
        - plannedQuay
        - stopPlace
      properties:
        stopPlace:
          $ref: "#/components/schemas/StopPlace" ## EXT
        serviceDeparture: # EXT directly inline service time
          description: >-
            Describes the departure situation at this leg board stop point (group of attributes
            of timetabled passing time, estimated passing time, observed passing time).#
          $ref: "#/components/schemas/ServiceTime"
        # status:
        #   $ref: "#/components/schemas/StopCallStatus"

    ServiceTime: ## OJP
      type: object
      description: >-
        Contains at least scheduled time, but can contain real time and estimated times. Provided by OJP.
      required:
        - timetabledTime
      properties:
        timetabledTime:
          type: string
          format: date-time
        estimatedTime:
          type: string
          format: date-time
        observedTime:
          type: string
          format: date-time

    DatedJourneySpecification: ## OJP # Reduced scope
      type: object
      description: >-
        Vehicle journey that runs at a specific date. Provided by OJP.

        A vehicle can either be defined by a vehicle number(s) or line number(s) in the
        case of regional traffic.
      required:
        # - operatingDayRef
        # - journeyRef
        - mode
        - publishedServiceName
        - operatorRef
      properties:
        # publishedServiceName:
        #  description: >-
        #    Line name or service description as known to the public, f.e. "512", "S8"
        #    or "Circle Line" or "ICE 488".
        #  type: string
        #  example: S1
        vehicleNumbers: # EXT Fix to OJP submitted, see https://github.com/VDVde/OJP/issues/173
          description: >-
            The vehicle number(s) of the vehicle(s) that runs this timed leg.
            On some legs a vehicle has multiple vehicles, e.g. if it is split into two
            trains at a intermediate stop.
          type: array
          items:
            type: string
        lineNumbers:
          description: >-
            List of line numbers that are part of this journey.
            Especially on regional traffic, a vehicle is defined by a line number only.
          type: array
          items:
            type: string
        operatorRef:
          description: >-
            Reference to transport operator.
            For UIC see: https://unioninternationalcheminsdefer.github.io/OSDM/spec/catalog-of-code-lists/
          type: string
          example: "urn:uic:rics:11:321"

    StopPlace: ## OJP # Reduced scope
      type: object
      description: >-
        A place extended by accessibility limitation properties and some attributes of the associated equipment, 
        comprising one or more places where vehicles may stop and where passengers may board or leave vehicles 
        or prepare their trip, and which will usually have one or more wellknown names. Provided by OJP.
      #allOf:
      required:
        - stopPlaceRef
        #  - stopPlaceName  # EXT no longer mandatory as being passed in a trip
      properties:
        stopPlaceRef:
          description: Reference to a Stop Place
          $ref: "#/components/schemas/StopPlaceRef"
        stopPlaceName:
          description: Name of this stop place for use in passenger information.
          type: string
          example: Zürich HB

    StopPlaceRef: ## OJP
      description: >-
        Reference to a Stop Place using URNs to define code. Default code list UIC MERITS/TAP-TSI station codes. Provided by OJP.
      type: string
      example: "8503000"

    ##

    Passenger:
      description: >-
        Passenger with the relevant information only to be contacted in case if a disruption.
      type: object
      properties:
        externalRef:
          type: string
          example: TKT-ID-2314234
        firstName:
          type: string
          example: Patrick
        lastName:
          type: string
          example: Schweizer
        dateOfBirth:
          type: string
          format: date
        eMail:
          type: string
          example: p.schweizer@demo.ch
        phone:
          type: string
          example: 078 434 4434

    ##

    ComfortClass:
      description: >-
        Generic class classification, representing the classic distinction into FIRST and SECOND class.
        Mostly used to harmonize choice and representation across multiple carriers.
      type: string
      x-extensible-enum:
        - FIRST
        - SECOND
      example: FIRST

    PlaceProperty:
      description: >-
        Define a property of a place. For a given service level a set of properties are valid.

        See UIC 918.1, Tarif Code (42), type of coach (37-1) and Compartment with Special Features (37-2).
      type: string
      enum:
        # Seat Preference
        - WINDOW
        - MIDDLE
        - AISLE
        - SOLO
        - TABLE
        # Restaurant Preference
        - RESTAURANT
        # Bike Preference
        - ACC_BICYCLE
        - BICYCLE
        - BICYCLE_INCL_SEAT
        - ACC_TANDEM
        - TANDEM
        # PRM
        - PRM
        - WHEELCHAIR
        - WHEELCHAIR_WS
        - EASY_ACCESS
        # Zone Preference
        - BUSINESS
        - SILENCE
        - FAMILY
        # Deck Preference
        - LOWER_DECK
        - UPPER_DECK
        # Special Preference
        - PANORAMA
        - FRONT_VIEW

    ServiceAvailability:
      type: object
      required:
        - accommodationSubType
      properties:
        accommodationSubTypes:
          type: array
          items:
            $ref: "#/components/schemas/AccommodationSubTypeAvailability"

    AccommodationSubTypeAvailability:
      type: object
      required:
        - accommodationOfferId
        - comfortClass
        - passengerReferences
        - accommodationType
        - accommodationSubType
      properties:
        accommodationOfferId:
          type: string
          example: "offerid-1"
        comfortClass:
          $ref: "#/components/schemas/ComfortClass"
        accommodationType:
          $ref: "#/components/schemas/AccommodationType"
        accommodationSubType:
          $ref: "#/components/schemas/AccommodationSubType"
        numericAvailability:
          type: number
          format: int32
          example: 22
        placeProperties:
          type: array
          items:
            $ref: "#/components/schemas/PlaceProperty"
        passengerReferences:
          type: array
          items:
            type: string
            example: "passenger-1"

    AccommodationType:
      type: string
      description: >-
        The accommodation type refers to the type of a vehicle.
      x-extensible-enum:
        - SEAT
        - COUCHETTE
        - BERTH
        - VEHICLE
      default: SEAT

    AccommodationSubType:
      type: string
      description: >-
        The accommodation sub type refers to reservable zones within a vehicle.
      x-extensible-enum:
        - BICYCLE
        - BISTRO
        - BUSINESS
        - COMPARTEMENT
        - EXCELLENCE
        - FAMILY
        - FRONT_VIEW
        - HISTORIC_TRAIN
        - OPEN_SPACE
        - PANORAMA
        - PRAM
        - PRAM_WITH_SEAT
        - RESTAURANT
        - SILENCE
        - WHEELCHAIR
        - WHEELCHAIR_WITH_SEAT
      example: OPEN_SPACE

    ##
