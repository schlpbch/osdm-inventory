openapi: 3.0.3
info:
  title: NOVA Master Data API
  version: 1.0.0-rc3
  description: >-
    NOVA Master Data API to access inventory information.
  contact:
    name: Andreas Schlapbach
    email: andreas.schlapbach@sbb.ch

tags:
  - name: master data
    description: >-
      Master data resources to get vehicle or product information hosted by 
      an inventory.

paths:
  /inventory/vehicles:
    get:
      summary: returns a list of vehicles hosted in the inventory
      operationId: getVehicles
      tags:
        - master data
      parameters:
        - $ref: "#/components/parameters/authorization"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
        - name: operatorRef
          description: >-
            If not set, all vehicles of all operators are returned
          required: false
          in: query
          schema:
            type: string
            example: 11
        - name: uicCountryCode
          required: false
          in: query
          schema:
            type: string
            example: 85
        - name: lastModified
          required: false
          in: query
          schema:
            type: string
            format: date-time

      responses:
        "200":
          description: >-
            returns a list of vehicles managed in this inventory system.
            An inventory Item is defined by its validity range and can have multiple validity ranges
            in which it is enabled.
          content:
            "application/json":
              schema:
                type: object
                properties:
                  warning:
                    $ref: "#/components/schemas/WarningMessageList"
                  vehicles:
                    type: array
                    items:
                      $ref: "#/components/schemas/Vehicle"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

  /inventory/productDefinitions:
    get:
      summary: returns a list of products hosted in the inventory
      operationId: getProducts
      tags:
        - master data
      parameters:
        - $ref: "#/components/parameters/authorization"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
        - name: operatorRef
          description: >-
            If not set, all products of all operators are returned
          required: false
          in: query
          schema:
            type: string
            example: 11
        - name: uicCountryCode
          required: false
          in: query
          schema:
            type: string
            example: 85
        - name: lastModified
          required: false
          in: query
          schema:
            type: string
            format: date-time

      responses:
        "200":
          description: >-
            returns a list of products managed in this inventory system.
          content:
            "application/json":
              schema:
                type: object
                properties:
                  warnings:
                    $ref: "#/components/schemas/WarningMessageList"
                  products:
                    type: array
                    items:
                      "$ref": "#/components/schemas/ProductDefinition"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "501":
          description: Not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

components:
  parameters:
    authorization:
      name: Authorization
      in: header
      description: >-
        OAuth2 token used to authenticate the consumer API. Refer to the implementation documentation
        for information on how to get a token.
      schema:
        type: string
      required: true

    acceptLanguage:
      name: Accept-Language
      in: header
      description: >-
        Describes the set of natural languages that are preferred for localized text in the response
        to the request (see RFC2616-sec14.4). Supporting English (en) is a must.
      schema:
        type: string
      required: false

    traceParent:
      name: traceparent
      in: header
      description: >-
        The traceparent header describes the position of the incoming request in its trace graph in a portable, 
        fixed-length format. Its design focuses on fast parsing. Every tracing tool MUST properly set 
        traceparent even when it only relies on vendor-specific information in tracestate (see W3C Trace Context).
      schema:
        type: string
      required: false

    traceState:
      name: tracestate
      in: header
      description:
        The tracestate extends traceparent with vendor-specific data represented by a set of name/value pairs.
        Storing information in tracestate is optional (see W3C Trace Context).
      schema:
        type: string
      required: false

  responses:
    BadRequestResponse:
      description: Bad Request (400)
      content:
        "application/problem+json":
          schema:
            $ref: "#/components/schemas/Problem"

    ConflictResponse:
      description: Conflict (409)
      content:
        "application/problem+json":
          schema:
            $ref: "#/components/schemas/Problem"

    InternalServerErrorResponse:
      description: Internal Server Error (500)
      content:
        "application/problem+json":
          schema:
            $ref: "#/components/schemas/Problem"

    ServiceUnavailableResponse:
      description: Service Unavailable (503)
      content:
        "application/problem+json":
          schema:
            $ref: "#/components/schemas/Problem"

  schemas:
    WarningMessageList:
      type: array
      items:
        type: object
        properties:
          code:
            type: string
          text:
            type: string
          elementList:
            type: array
            items:
              $ref: "#/components/schemas/Resource"
        description: >-
          This element can be used to pass non-blocking information or events,
          such as a price difference with the initially offered price at booking time.

    Resource:
      type: object
      description: used to represent a non-specified resource in the API.
      properties:
        id:
          type: string
          description: unique id of this resource on this server.
        title:
          type: string
          example: Bruxelles-Midi
        type:
          type: string
          enum:
            - MASTER_DATA
        href:
          type: string
          format: url
          example: "http://some.provider/location/2345"
      required:
        - id
        - title
        - type
        - href

    Problem:
      type: object
      description: >-
        Problem Details for HTTP APIs (RFC 7807) defines a "problem detail" as a way
        to carry machine-readable details of errors in a HTTP response to avoid
        the need to define new error response formats for HTTP APIs.
        See: https://tools.ietf.org/html/rfc7807
      properties:
        type:
          type: string
          format: uri
          description: >-
            An absolute URI that identifies the problem type. When dereferenced,
            it SHOULD provide human-readable documentation for the problem type
            (e.g., using HTML).
          default: "about:blank"
          example: "https://example.com/probs/passenger-too-young"
        title:
          type: string
          description: >-
            A short, summary of the problem type. Written in English and readable
            for engineers (usually not suited for non technical stakeholders and
            not localized); example: Service Unavailable
        status:
          type: integer
          format: int32
          description: >-
            The HTTP status code generated by the origin server for this occurrence
            of the problem.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
          example: 503
        detail:
          type: string
          description: >-
            A human readable explanation specific to this occurrence of the
            problem.
          example: Connection to database timed out
        instance:
          type: string
          format: uri
          description: >-
            An absolute URI that identifies the specific occurrence of the problem.

    # begin of vehicle

    Vehicle:
      type: object
      properties:
        validities:
          type: array
          items:
            $ref: "#/components/schemas/InventoryItemTemporalValidity"
        id:
          type: integer
          format: int64
        lastModifiedDate:
          type: string
          format: date-time
        vehicleNumber:
          type: integer
          format: int32
          example: 565
        operatorRef:
          type: string
          example: urn:sbb:85:11

    InventoryItemTemporalValidity:
      description: Defines a validity range for a given item.
      type: object
      required:
        - validFrom
        - validUntil
      properties:
        validFrom:
          type: string
          format: date
        validUntil:
          type: string
          format: date

    ## end of vehicles

    ## start of products

    ProductCode:
      description: the product code.
      type: string
      example: 125

    # Length of all strings should be define as we want / need to store them in a database.
    ProductDefinition:
      type: object
      description: >-
        Structured description of the product, its name, comfort and sales / after-sales conditions
      required:
        - validities
        - id
        - abstract
        - type
        - family
        - code
        - descriptions
        - conditions
        - fulfillmentOptions
      properties:
        validities:
          type: array
          items:
            $ref: "#/components/schemas/InventoryItemTemporalValidity"
        # Length is required as we need to store it in a database
        id:
          description: unique id of this product on this server.
          type: string
        abstract:
          description: >-
            Internal product description.
          type: string
          example: TGV Lyria Loisir 2
        family:
          description: >-
            The name of the family the product belongs to.
            E.g. all "Produktausprägungen" can be part of the same family.
          type: string
        type:
          description: >-
            Coarse grained categorization of the product type. Used to determine the type of an
            Offer (see "OfferPartType").
          type: string
          enum:
            - ADMISSION
            - RESERVATION
            - ANCILLARY
            - FEE
        code:
          type: string
          description: >-
            The product code expressed in the provider system (could be a
            mapping from an even lower-level provider).
          example: PT00AD
        descriptions:
          type: array
          items:
            $ref: "#/components/schemas/Translation"
        conditions:
          type: array
          items:
            $ref: "#/components/schemas/Condition"
          description: >-
            Structured description of the sales or after-sales conditions.
        accommodationType:
          description: Accommodation type according to UIC
          $ref: "#/components/schemas/AccommodationType"
        accommodationSubType:
          description: >-
            Defines whether the product is valid for specific accommodation sub types only. 
            Mandatory in case for reservation products.
          $ref: "#/components/schemas/AccommodationSubType"
        serviceClass:
          description: >-
            Defines whether the product is valid for a specific service classes.
          $ref: "#/components/schemas/ServiceClass"
        comfortClass:
          description: >-
            Defines whether the product is valid for a specific comfort classes.
          $ref: "#/components/schemas/ComfortClass"
        isTrainBound:
          type: boolean
          default: false
        isReturnProduct:
          type: boolean
          default: false
        fulfillmentOptions:
          type: array
          items:
            $ref: "#/components/schemas/FulfillmentOption"

    FulfillmentOption:
      type: object
      required:
        - type
      description: >-
        CIT paper implies printing on value paper which is stock controlled.
      properties:
        type:
          $ref: "#/components/schemas/FulfillmentType"
        media:
          type: array
          items:
            $ref: "#/components/schemas/FulfillmentMediaType"

    Condition:
      type: object
      description: >-
        Describes sales and after sales conditions applicable to the product. 
        For a product to be refundable or exchangeable, at least one refund or exchange 
        (respectively) condition must be present.
      properties:
        type:
          type: string
          x-extensible-enum:
            - SALE
            - FULFILLMENT
            - EXCHANGE
            - REFUND
            - TRAVEL
        descriptions:
          type: array
          items:
            $ref: "#/components/schemas/Translation"
        validFrom:
          type: string
          format: date-time
        validUntil:
          type: string
          format: date-time
        afterSalesFee:
          type: object
          properties:
            feePrice:
              $ref: "#/components/schemas/Price"
            isAllocatorFee:
              description: indicates whether the fee belongs to the allocator
              type: boolean
              default: false
      required:
        - type
        - descriptions

    Price:
      type: object
      minProperties: 1
      properties:
        currency:
          $ref: "#/components/schemas/Currency"
        amount:
          description: amount in cents
          type: integer
          format: int32
        scale:
          description: scale of the amount - the number of positions after the comma
          type: integer
          default: 2
        vatDetails:
          type: array
          items:
            $ref: "#/components/schemas/VAT"
      required:
        - currency
        - amount

    Currency:
      description: ISO 4217 currency codes
      type: string
      example: CHF

    VAT:
      type: object
      properties:
        country:
          description: ISO 3166 2A codes
          type: string
          example: CH
        amount:
          description: amount in cents
          type: integer
          format: int32
          example: 5
        scale:
          description: scale of the amount - the number of positions after the comma
          type: integer
          default: 2
        percentage:
          type: number
          format: float
        taxId:
          type: string
        scope:
          $ref: "#/components/schemas/VatScope"
      required:
        - country
        - amount

    VatScope:
      description: scope where the VAT applies
      type: string
      x-extensible-enum:
        - INTERNATIONAL
        - NATIONAL
        - SHORT_DISTANCE
        - LONG_DISTANCE
    
    AccommodationType:
      type: string
      description: >-
        The accommodation type refers to the type of a vehicle.    
      x-extensible-enum:
        - SEAT
        - COUCHETTE
        - BERTH
        - VEHICLE
      default:
        SEAT

    AccommodationSubType:
      type: string
      description: >-
        The accommodation sub type refers to reservable zones within a vehicle.
      x-extensible-enum:
        - BICYCLE
        - BISTRO
        - BUSINESS
        - COMPARTEMENT
        - EXCELLENCE
        - FAMILY
        - FRONT_VIEW
        - HISTORIC_TRAIN
        - OPEN_SPACE
        - PANORAMA
        - PRAM
        - PRAM_WITH_SEAT
        - RESTAURANT
        - SILENCE
        - WHEELCHAIR
        - WHEELCHAIR_WITH_SEAT
      example:
        OPEN_SPACE

    ServiceClass:
      type: object
      description: >-
        Class of service.
      properties:
        type:
          $ref: "#/components/schemas/ServiceClassType"
        name:
          type: string
          description: The name the carrier itself uses to designate this specific service class.

    ServiceClassType:
      type: string
      description: >-
        Type of quality level, finer grained than the comfort class.
      x-extensible-enum:
        - BEST
        - HIGH
        - STANDARD
        - BASIC

    ComfortClass:
      description: >-
        Generic class classification, representing the classic distinction into FIRST and SECOND class.
        Mostly used to harmonize choice and representation across multiple carriers.
      type: string
      x-extensible-enum:
        - FIRST
        - SECOND

    Flexibility:
      type: string
      x-extensible-enum:
        - FULLFLEX
        - SEMIFLEX
        - NONFLEX

    FulfillmentType:
      type: string
      x-extensible-enum:
        - ETICKET
        - CIT_PAPER
        - PASS_CHIP
        - PASS_REFERENCE

    FulfillmentMediaType:
      type: string
      description: >-
        Fulfillment types. RCT2, RCCST and UIC-PDF are official UIC standards.
      x-extensible-enum:
        - RCT2
        - RCCST
        - UIC_PDF
        - PDF_A4
        - PKPASS
        - TICKETLESS

    Translation:
      type: object
      properties:
        language:
          type: string
          description: language code following RFC2616-sec14.4
          example: en
        text:
          type: string
        shortText:
          type: string
      required:
        - language
        - text

    ## end of product schema