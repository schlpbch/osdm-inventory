openapi: 3.0.3
info:
  title: NOVA Inventory Booking API
  version: 1.0.0-rc6
  description: >-
    NOVA Inventory API to book places in a inventory
  contact:
    name: Andreas Schlapbach
    email: andreas.schlapbach@sbb.ch

tags:
  - name: availabilities
    description: >-
      availability of vehicle
  - name: bookings
    description: >-
      bookings of vehicle

paths:
  /availabilities:
    post:
      tags:
        - availabilities
      summary: returns availability of a vehicle
      description: >-
        Returns availability. The availability can be filtered using place properties or service levels.
      operationId: getAvailabilities
      parameters:
        # - $ref: "#/components/parameters/authorization"
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
      requestBody:
        description: request for availability
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AvailabilityRequest"
      responses:
        "200":
          description: the requested place
          headers:
            Cache-Control:
              schema:
                type: string
                default: "public, max-age=10000"
                description: >-
                  A places resource is fairly persistent and has a medium time to live to allow short-term caching.
          content:
            application/json:
              schema:
                type: object
                required:
                  - availabilities
                properties:
                  warning:
                    $ref: "#/components/schemas/WarningMessageList"
                  tripAvailabilities:
                    $ref: "#/components/schemas/TripAvailability"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: unauthorized
        "403":
          description: forbidden
        "404":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "500":
          description: internal server error
        "501":
          description: not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

  /bookings:
    post:
      tags:
        - bookings
      summary: returns reservation of a vehicle in the state pre-booked
      description: >-
        Returns a booking in state pre-booked.
      operationId: postBooking
      requestBody:
        description: request for booking
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BookingRequest"
      responses:
        "200":
          description: the requested place
          headers:
            Cache-Control:
              schema:
                type: string
                default: "public, max-age=10000"
                description: >-
                  A booking resource is fairly persistent and has a medium time to live to allow short-term caching.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookingResponse"
        "400":
          description: bad input parameter
        "401":
          description: unauthorized
        "403":
          description: forbidden
        "404":
          description: no place information found
        "500":
          description: internal server error
        "501":
          description: not implemented
        "503":
          description: service unavailable
    patch:
      tags:
        - bookings
      summary: confirms a booking of a vehicle
      description: >-
        Returns a booking in state CONFIRMED
      operationId: patchBooking
      requestBody:
        description: request to confirm a booking
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BookingPatchRequest"
      responses:
        "200":
          description: booking confirmed
          headers:
            Cache-Control:
              schema:
                type: string
                default: "public, max-age=10000"
                description: >-
                  A booking resource is fairly persistent and has a medium time to live to allow short-term caching.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookingPatchResponse"
        "400":
          description: bad input parameter
        "401":
          description: unauthorized
        "403":
          description: forbidden
        "404":
          description: no place information found
        "500":
          description: internal server error
        "501":
          description: not implemented
        "503":
          description: service unavailable

  /bookings/{bookingId}:
    delete:
      tags:
        - bookings
      summary: cancel a booking of a vehicle
      description: >-
        Cancels a booking.
      operationId: deleteBooking
      parameters:
        - in: path
          name: bookingId
          schema:
            type: string
            description: unique and opaque ID of the booking
          required: true
          description: ID of the booking to cancel.
      responses:
        "200":
          description: booking confirmed
        "400":
          description: bad input parameter
        "401":
          description: unauthorized
        "403":
          description: forbidden
        "404":
          description: no place information found
        "500":
          description: internal server error
        "501":
          description: not implemented
        "503":
          description: service unavailable

security:
  - oAuth2ClientCredentials: []

components:
  securitySchemes:
    oAuth2ClientCredentials:
      type: oauth2
      description: See https://swagger.io/docs/specification/authentication/oauth2/
      flows:
        clientCredentials:
          # The token endpoint of the authorization server, needs to be specified here
          tokenUrl: "https://login.microsoftonline.com/tbd"
          scopes: {} # The scopes are not being used yet

  parameters:
    acceptLanguage:
      name: Accept-Language
      in: header
      description: >-
        Describes the set of natural languages that are preferred for localized text in the response
        to the request (see RFC2616-sec14.4). Supporting English (en) is a must.
      schema:
        type: string
      required: false

    traceParent:
      name: traceparent
      in: header
      description: >-
        The traceparent header describes the position of the incoming request in its trace graph in a portable, 
        fixed-length format. Its design focuses on fast parsing. Every tracing tool MUST properly set 
        traceparent even when it only relies on vendor-specific information in tracestate (see W3C Trace Context).
      schema:
        type: string
      required: false

    traceState:
      name: tracestate
      in: header
      description:
        The tracestate extends traceparent with vendor-specific data represented by a set of name/value pairs.
        Storing information in tracestate is optional (see W3C Trace Context).
      schema:
        type: string
      required: false

  responses:
    BadRequestResponse:
      description: Bad Request (400)
      content:
        "application/problem+json":
          schema:
            $ref: "#/components/schemas/Problem"

    ConflictResponse:
      description: Conflict (409)
      content:
        "application/problem+json":
          schema:
            $ref: "#/components/schemas/Problem"

    InternalServerErrorResponse:
      description: Internal Server Error (500)
      content:
        "application/problem+json":
          schema:
            $ref: "#/components/schemas/Problem"

    ServiceUnavailableResponse:
      description: Service Unavailable (503)
      content:
        "application/problem+json":
          schema:
            $ref: "#/components/schemas/Problem"

  schemas:
    WarningMessageList:
      type: array
      items:
        type: object
        properties:
          code:
            type: string
          text:
            type: string
          elementList:
            type: array
            items:
              $ref: "#/components/schemas/Resource"
        description: >-
          This element can be used to pass non-blocking information or events,
          such as a price difference with the initially offered price at booking time.

    Resource:
      type: object
      description: used to represent a non-specified resource in the API.
      properties:
        id:
          type: string
          description: unique id of this resource on this server.
        title:
          type: string
          example: Bruxelles-Midi
        type:
          type: string
          enum:
            - MASTER_DATA
        href:
          type: string
          format: url
          example: "http://some.provider/location/2345"
      required:
        - id
        - title
        - type
        - href

    Problem:
      type: object
      description: >-
        Problem Details for HTTP APIs (RFC 7807) defines a "problem detail" as a way
        to carry machine-readable details of errors in a HTTP response to avoid
        the need to define new error response formats for HTTP APIs.
        See: https://tools.ietf.org/html/rfc7807
      properties:
        type:
          type: string
          format: uri
          description: >-
            An absolute URI that identifies the problem type. When dereferenced,
            it SHOULD provide human-readable documentation for the problem type
            (e.g., using HTML).
          default: "about:blank"
          example: "https://example.com/probs/passenger-too-young"
        title:
          type: string
          description: >-
            A short, summary of the problem type. Written in English and readable
            for engineers (usually not suited for non technical stakeholders and
            not localized); example: Service Unavailable
        status:
          type: integer
          format: int32
          description: >-
            The HTTP status code generated by the origin server for this occurrence
            of the problem.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
          example: 503
        detail:
          type: string
          description: >-
            A human readable explanation specific to this occurrence of the
            problem.
          example: Connection to database timed out
        instance:
          type: string
          format: uri
          description: >-
            An absolute URI that identifies the specific occurrence of the problem.

    ## end of product schema

    AvailabilityRequest:
      type: object
      required:
        - tripSpecifications
        - passengerSpecifications
      properties:
        tripSpecifications:
          type: array
          items:
            $ref: "#/components/schemas/TripSpecification"
        passengerSpecifications:
          type: array
          items:
            $ref: "#/components/schemas/PassengerSpecification"
        embeddedPart:
          type: string
          enum:
            - LEG_AVAILABILITIES
            - OFFERS
            - ALL
          default: ALL

    TripAvailability:
      type: object
      description: >-
        Availability per leg for a given trip.
      required:
        - tripId
      properties:
        tripId:
          type: string
        legAvailabilities:
          type: array
          items:
            $ref: "#/components/schemas/TripLegAvailability"

    TripLegAvailability:
      type: object
      description: Availability per leg for a given trip.
      required:
        - legId
        - reservationAvailabilities
      properties:
        legId:
          type: string
        reservationAvailabilities:
          type: array
          items:
            $ref: "#/components/schemas/ReservationAvailability"
        reservationOffers:
          type: array
          items:
            $ref: "#/components/schemas/ReservationOffer"

    ReservationOffer:
      type: object
      required:
        - id
        - productCode
        - price
        - fulfillmentTypes
        - placeAvailabilityId
      properties:
        id:
          type: string
        productCode:
          type: string
          description: >-
            The product code expressed in the provider system (could be a
            mapping from an even lower-level provider).
          example: Reservierungsentgelt
        price:
          type: object
          $ref: "#/components/schemas/Price"
        fulfillmentTypes:
          type: array
          items:
            $ref: "#/components/schemas/FulfillmentType"
        placeAvailabilityId:
          type: string

    ##

    TripSpecification:
      type: object
      description: >-
        A minimal trip specification from origin to destination.
      required:
        - id
        - legs # EXT replaces tripLegs, fix to OJP submitted, see https://github.com/VDVde/OJP/issues/179
      properties:
        id:
          description: >-
            Id of this trip for referencing purposes. Unique within trip response.
          type: string
        legs:
          description: Legs ot the trip with minimal information
          type: array
          items:
            $ref: "#/components/schemas/TripLegSpecification"
          minItems: 1

    TripLegSpecification:
      type: object
      description: >-
        A minimal simple trip leg specification consisting only of timed legs. Transfer legs 
        and continuous legs are not part of this specification as they are not relevant to find
        the correct vehicles by a pricing engine.
      required:
        - id ## EXT replaces legId, fix to OJP submitted, see https://github.com/VDVde/OJP/issues/181
      properties:
        id:
          description: Id of this trip leg. Unique within trip result. A seqId is a leg id.
          type: string
        timedLeg:
          $ref: "#/components/schemas/TimedLegSpecification"
        transferLeg:
          $ref: "#/components/schemas/TransferLeg"
        # continuousLeg:
        #   $ref: "#/components/schemas/ContinuousLeg"

    TimedLegSpecification:
      type: object
      description: >-
        A minimal timed leg specification.
      required:
        - alight # EXT renamed timedAlight
        - board # EXT renamed timedBoard
        - service
      properties:
        board:
          $ref: "#/components/schemas/LegBoardSpecification"
        intermediates:
          type: array
          items:
            $ref: "#/components/schemas/LegIntermediateSpecification"
        alight:
          $ref: "#/components/schemas/LegAlightSpecification"
        service:
          $ref: "#/components/schemas/DatedJourney"

    LegBoardSpecification:
      type: object
      description: >-
        Describes the the situation at a stop or station at which the passenger boards a Leg
        of a trip including time-related information. Provided by OJP.
      #allOf:
      required:
        - stopPlaceRef ## EXT stopPlaceRef instead of stopPointRef
        - serviceDeparture
      properties:
        stopPlaceRef:
          $ref: "#/components/schemas/StopPlaceRef" ## EXT stopPlaceRef instead of stopPointRef
        serviceDeparture: # EXT directly inline service time
          description: >-
            Describes the departure situation at this leg board stop point (group of attributes
            of timetabled passing time, estimated passing time, observed passing time).
          $ref: "#/components/schemas/ServiceTime"

    LegIntermediateSpecification:
      type: object
      description: >-
        Describes the situation at a stop or station that lies between the LegBoard and 
        LegAlight stop or station including time-related information. Provided by OJP.
      #allOf:
      required:
        - stopPlaceRef ## EXT stopPlaceRef instead of stopPointRef
        - serviceArrival
        - serviceDeparture
      properties:
        stopPlaceRef:
          $ref: "#/components/schemas/StopPlaceRef" ## EXT stopPlaceRef instead of stopPointRef
        serviceArrival: # EXT directly inline service time
          description: >-
            Describes the arrival situation at this leg board stop point (group of attributes
            of timetabled passing time, estimated passing time, observed passing time).
          $ref: "#/components/schemas/ServiceTime"
        serviceDeparture: # EXT directly inline service time
          description: >-
            Describes the departure situation at this leg board stop point (group of attributes
            of timetabled passing time, estimated passing time, observed passing time).
          $ref: "#/components/schemas/ServiceTime"
    
    LegAlightSpecification:
      type: object
      description: >-
        Describes the situation at a stop or station at which the passenger alights from a Leg 
        of a trip including time-related information. Provided by OJP.
      #allOf:
      required:
        - stopPlaceRef ## EXT stopPlaceRef instead of stopPointRef
        - serviceArrival
      properties:
        stopPlaceRef:
          $ref: "#/components/schemas/StopPlaceRef" ## EXT stopPlaceRef instead of stopPointRef
        serviceArrival: # EXT directly inline service time
          description: >-
            Describes the arrival situation at this leg board stop point (group of attributes
            of timetabled passing time, estimated passing time, observed passing time).
          $ref: "#/components/schemas/ServiceTime"
    
    DatedJourney: ## OJP # Reduced scope
      type: object
      description: >-
        Vehicle journey that runs at a specific date. Provided by OJP.
      required:
        # - operatingDayRef
        # - journeyRef
        # - mode
        # - publishedServiceName # EXT 
        # - privateMode # EXT
        - operatorRefs
        # - originText
        # - destinationText
      properties:
        # operatingDayRef:  # Out of scope
        #   $ref: "#/components/schemas/OperationDayRef"
        # journeyRef:  # Out of scope
        #   $ref: "#/components/schemas/JourneyRef"
        mode:
          $ref: "#/components/schemas/Mode"
        productCategory:
          $ref: "#/components/schemas/ProductCategory"
        publishedServiceName:
          description: >-
            Line name or service description as known to the public, f.e. "512", "S8"
            or "Circle Line" or "ICE 488".
          type: string
          example: S1
        vehicleNumbers: # EXT Fix to OJP submitted, see https://github.com/VDVde/OJP/issues/173
          description: >-
            The vehicle number(s) of the vehicle(s) that runs this timed leg.
            On some legs a vehicle has multiple vehicles, e.g. if it is split into two
            trains at a intermediate stop.

            For backwards compatibility with Hermes/Hosa the length of the string must be restricted
            to 5 characters. If's longer, it is not possible to use the H2O converter.
          type: array
          items:
            type: string
            example:
              - "TGV 9218"
              - "TH 9340"
              - "ICE 15"
        lineNumbers:
          description: >-
            List of line numbers that are part of this journey.
            Especially on regional traffic, a vehicle is defined by a line number only.
          type: array
          items:
            type: string
            example: 
             - "S 52"
             - "B 19"
        operatorRefs:
          description: >-
            Reference to transport operators.
            For UIC see: https://unioninternationalcheminsdefer.github.io/OSDM/spec/catalog-of-code-lists/

            As a leg can be operated by more than operator we model it as an array here.
          type: array
          items:
            type: string
            example: 
             - "urn:uic:rics:1185:11"
             - "urn:uic:rics:1185:72"
             - "urn:uic:rics:1185:48"

    ServiceTime: ## OJP
      type: object
      description: >-
        Contains at least scheduled time, but can contain real time and estimated times. Provided by OJP.
      required:
        - timetabledTime
      properties:
        timetabledTime:
          type: string
          format: date-time
        estimatedTime:
          type: string
          format: date-time
        observedTime:
          type: string
          format: date-time

    Mode: ## OJP
      type: object
      description: >-
        A method of transportation such as bus, rail, etc. Provided by OJP.
      required:
        - ptMode
      properties:
        ptMode: # EXT
          description: >-
            Subset of SIRI Modes which are sensible.
            TAP-TSI/UIC: Transport Mode  TODO: Align with SIRI
          type: string
          x-extensible-enum:
            - HIGH_SPEED_TRAIN
            - HISTORIC_TRAIN
            - INTERCITY
            - REGIONAL
            - INTERREGIONAL
            - URBAN
            - TRAM
            - UNDERGROUND
            - NIGHT_TRAIN
            - SHARED_TAXI
            - MOTOR_RAIL
            - MOUNTAIN_TRAIN
            - PLANE
            - COACH_GROUP
            - SHIP
            - BUS

          #  $ref: "#/components/schemas/PtModeChoiceGroup"
        name:
          description: Name of the mode
          type: string
          example: rail
        shortName:
          description: Short name or acronym of the mode
          type: string
          example: S
        description:
          description: Additional text that further describes the mode
          type: string

    ProductCategory: ## OJP
      type: object
      description: >-
        Product category based on NeTEx/SIRI. A product category is a classification for vehicle journeys
        to express some common properties of journeys for marketing and fare products. Provided by OJP.
      required:
        - name
        - shortName
        - productCategoryRef
      properties:
        name:
          description: >-
            Full name of this product category, e.g. "TGV Lyria" in Switzerland and France.
            UIC: Long name of Service Brand
          type: string
          example: TGV Lyria
        shortName:
          description: >-
            Short name or acronym of the product category, likely to be published, e.g. "TGV"
            UIC: Abbreviation of Service Brand
          type: string
          example: TGV
        productCategoryRef:
          $ref: "#/components/schemas/ProductCategoryRef"

    StopPlaceRef: ## OJP
      description: >-
        Reference to a Stop Place using URNs to define code.
        For UIC see UIC MERITS/TAP-TSI station codes. Provided by OJP.
      type: string
      example: "urn:uic:stn:8503000"

    ProductCategoryRef: ## OJP
      description: >-
        Reference to a product category. Product categories should be defined once and used uniformly in all channels 
        (e.g. NeTEx, SIRI, OJP). Provided by OJP.
      type: string
      example: "urn:uic:sbc:76"

    ##

    Passenger:
      description: >-
        Passenger with the relevant information only to be contacted in case if a disruption.
      type: object
      properties:
        externalRef:
          type: string
          example: TKT-ID-2314234
        firstName:
          type: string
          example: Patrick
        lastName:
          type: string
          example: Schweizer
        dateOfBirth:
          type: string
          format: date
        eMail:
          type: string
          example: p.schweizer@demo.ch
        phone:
          type: string
          example: 078 434 4434

    PassengerSpecification:
      description: >-
        Passenger with the relevant information only to be contacted in case if a disruption.
      type: object
      required:
        - id
        - passengerType
      properties:
        id: 
          type: string
          format: uuid
        externalRef:
          type: string
          example: TKT-ID-2314234
        passengerType:
          $ref: "#/components/schemas/PassengerType"
        dateOfBirth:
          description: date of birth of the passenger
          type: string
          format: date

    PassengerType:
      description: >-
        Passenger type with the relevant information only to be contacted in case if a disruption.
      type: string
      x-extensible-enum:
        - PERSON
        - BICYCLE
      example: PERSON

    Booker:
      type: object
      description: >-
        Booker information needed at offering step.
      properties:
        id:
          type: string
        externalReference:
          description: >-
            A stable reference to a booker from other elements, or from caller system.
            When received in input of a trip-offers-collection request, it must be echoed back in the
            response.
          type: string
        details:
          $ref: "#/components/schemas/PersonDetail"

    PersonDetail:
      type: object
      description: >-
        Personal information potentially needed at booking step. The main purpose is
        being able to inform the customer of delays or disruptions.
        PersonDetails providing personal information only information required in the booking.
        It is not allowed to send personal information not required in the booking reply.
        It is not allowed to send these personal data already in the booking request.
      properties:
        preferredLanguage:
          type: string
          description: Languages spoken by the traveler (ISO Language code)
        abstract:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        eMail:
          type: string
        phoneNumber:
          description: Preferably a mobile phone number
          type: string
        address:
          description: address of the traveller. Can be relevant for some pass holders
          $ref: "#/components/schemas/Address"

    Address: ## OJP # Reduced scope
      description: >-
        A descriptive data associated with a place that can be used to describe the unique geographical context of a
        place for the purposes of identifying it. may be refined as either a road address, a postal address or both.
        Provided by OJP.
      # allOf:
      type: object
      required:
        # - addressCode
        - addressName
      properties:
        addressCode:
          description: ID of this address.
          type: string
          example: NL:1916200000022621
        # privateCode:  # Out of scope
        #   description: Code of this address in private/foreign/proprietary coding schemes.
        #   $ref: "#/components/schemas/PrivateCode"
        addressName:
          description: Name or description of address for use in passenger information.
          type: string
          example: Oude Trambaan 7, 2265CA Leidschendam, Nederland
        # nameSuffix:  # Out of scope
        #   description: House number of the address. If none is given, either a crossing street can be given, or the whole street is meant.
        #   type: string
        # - $ref: "#/components/schemas/AddressDetail"
        countryName:
          description: Country of the address.
          type: string
          example: The Netherlands
        countryCode:
          description: ISO country code (2 alpha), relative URNs with base urn:iso:std:iso:3166 are recommended
          type: string
          example: DE
        postCode:
          description: Postal code of the address.
          type: string
          example: 2265CA
        city: # EXT
          description: City name
          type: string
          example: Leidschendam
        topographicPlaceName:
          description: >-
            TopographicPlace name of the address. If set it should at least contain the city name.
          type: string
          example: Leidschendam
        # topographicPlaceRef:  # Out of scope
        #   description: If at least one is set, only place objects within the given localities are allowed.If at least one is set, only place objects within the given localities are allowed.Reference to a TopographicPlace
        #   $ref: "#/components/schemas/TopographicPlaceRef"
        street:
          description: Street name of the address.
          type: string
          example: Oude Trambaan
        houseNumber:
          description: House number of the address. If none is given, either a crossing street can be given, or the whole street is meant.
          type: string
          example: 7
        # crossRoad:  # Out of scope
        #   description: Crossing. This can be used to be more specific without using house numbers.
        #   type: string

    ##

    ComfortClass:
      description: >-
        Generic class classification, representing the classic distinction into FIRST and SECOND class.
        Mostly used to harmonize choice and representation across multiple carriers.
      type: string
      x-extensible-enum:
        - FIRST
        - SECOND
      example: FIRST

    PlaceProperty:
      description: >-
        Define a property of a place. For a given service level a set of properties are valid.

        See UIC 918.1, Tarif Code (42), type of coach (37-1) and Compartment with Special Features (37-2).
      type: string
      enum:
        # Seat Preference
        - WINDOW
        - MIDDLE
        - AISLE
        - SOLO
        - TABLE
        # Restaurant Preference
        - RESTAURANT
        # Bike Preference
        - ACC_BICYCLE
        - BICYCLE
        - BICYCLE_INCL_SEAT
        - ACC_TANDEM
        - TANDEM
        # PRM
        - PRM
        - WHEELCHAIR
        - WHEELCHAIR_WS
        - EASY_ACCESS
        # Zone Preference
        - BUSINESS
        - SILENCE
        - FAMILY
        # Deck Preference
        - LOWER_DECK
        - UPPER_DECK
        # Special Preference
        - PANORAMA
        - FRONT_VIEW

    ReservationAvailability:
      type: object
      required:
        - id
        - inventory
        - passengerIds
        - accommodationType
        - accommodationSubType
        - placeProperties
      properties:
        id:
          type: string
          example: "id-1"
        inventory:
          $ref: "#/components/schemas/Inventory"
        productCode:
          type: string
          description: >-
            The product code expressed in the provider system (could be a
            mapping from an even lower-level provider).
          example: PT00AD
        price:
          $ref: "#/components/schemas/Price"
        fulfillmentTypes:
          type: array
          items:
            $ref: "#/components/schemas/FulfillmentType"
        comfortClass:
          $ref: "#/components/schemas/ComfortClass"
        accommodationType:
          $ref: "#/components/schemas/AccommodationType"
        accommodationSubType:
          $ref: "#/components/schemas/AccommodationSubType"
        numericAvailability:
          description: number of places
          type: integer
          format: int32
          example: 22
        availablePlaceProperties:
          type: array
          items:
            $ref: "#/components/schemas/PlaceProperty"
        passengerReferences:
          type: array
          items:
            type: string
            example: "passenger-1"

    Inventory:
      type: string
      x-extensible-enum:
        - CAPRE
        - RESSYS

    Price:
      type: object
      minProperties: 1
      properties:
        currency:
          $ref: "#/components/schemas/Currency"
        amount:
          description: amount in cents
          type: integer
          format: int32
        scale:
          description: scale of the amount - the number of positions after the comma
          type: integer
          default: 2
        vatDetails:
          type: array
          items:
            $ref: "#/components/schemas/VAT"
      required:
        - currency
        - amount

    Currency:
      description: ISO 4217 currency codes
      type: string
      example: CHF

    VAT:
      type: object
      properties:
        country:
          description: ISO 3166 2A codes
          type: string
          example: CH
        amount:
          description: amount in cents
          type: integer
          format: int32
          example: 5
        scale:
          description: scale of the amount - the number of positions after the comma
          type: integer
          default: 2
        percentage:
          type: number
          format: float
        taxId:
          type: string
        scope:
          $ref: "#/components/schemas/VatScope"
      required:
        - country
        - amount

    VatScope:
      description: scope where the VAT applies
      type: string
      x-extensible-enum:
        - INTERNATIONAL
        - NATIONAL
        - SHORT_DISTANCE
        - LONG_DISTANCE

    FulfillmentType:
      type: string
      x-extensible-enum:
        - ETICKET
        - CIT_PAPER
        - PASS_CHIP
        - PASS_REFERENCE

    AccommodationType:
      type: string
      description: >-
        The accommodation type refers to the type of a vehicle.
      x-extensible-enum:
        - SEAT
        - COUCHETTE
        - BERTH
        - VEHICLE
      default: SEAT

    AccommodationSubType:
      type: string
      description: >-
        The accommodation sub type refers to reservable zones within a vehicle.
      x-extensible-enum:
        - BICYCLE
        - BISTRO
        - BUSINESS
        - COMPARTEMENT
        - EXCELLENCE
        - FAMILY
        - FRONT_VIEW
        - HISTORIC_TRAIN
        - OPEN_SPACE
        - PANORAMA
        - PRAM
        - PRAM_WITH_SEAT
        - RESTAURANT
        - SILENCE
        - WHEELCHAIR
        - WHEELCHAIR_WITH_SEAT
      example: OPEN_SPACE

    ## Booking
    BookingRequest:
      type: object
      description: >-
        place selection options and selected options in an offer
        - selected place properties (selectedOption)
        - reference place for adjacent reservation (selectedReferencePlace)
        - selected places from a graphical place selection (selectedCoaches)
      required:
        - booker
        - selectionPerLegs
      properties:
        booker:
          $ref: "#/components/schemas/Booker"
        selectionPerLegs:
          type: array
          items:
            $ref: "#/components/schemas/SelectionPerLeg"
        # passengers:
        #   type: array
        #   items:
        #     $ref: "#/components/schemas/Passenger"

    BookingResponse:
      type: object
      required:
        - bookingId
        - status
        - reservedTrip
        - reservedPlaces
      properties:
        bookingId:
          type: string
          format: uuid
        state:
          $ref: "#/components/schemas/BookingState"
        reservedTrip:
          $ref: "#/components/schemas/Trip"
        reservedPlaces:
          type: array
          items:
            $ref: "#/components/schemas/TupleReservedPlacePassenger"

    BookingPatchRequest:
      type: object
      required:
        - bookingId
        - state
      properties:
        bookingId:
          type: string
          format: uuid
        state:
          # $ref: "#/components/schemas/BookingState"
          type: string
          example: "CONFIRMED"

    BookingPatchResponse:
      type: object
      required:
        - bookingId
      properties:
        bookingId:
          type: string
          format: uuid
        state:
          $ref: "#/components/schemas/BookingState"
        accommodationType:
          $ref: "#/components/schemas/AccommodationType"
        reservedPlaces:
          type: array
          items:
            $ref: "#/components/schemas/TupleReservedPlacePassenger"

    ##

    Trip:
      type: object
      required:
        - tripId
        - startTime
        - endTime
      properties:
        tripId:
          type: string
          format: uuid
        origin:
          $ref: "#/components/schemas/Place"
        destination:
          $ref: "#/components/schemas/Place"
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        transfers:
          type: number
          format: int32
        tripLegs:
          type: array
          items:
            $ref: "#/components/schemas/TripLeg"

    Place:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        name:
          type: string
          example: Zürich HB

    TripLeg:
      type: object
      properties:
        legId:
          type: number
          format: int32
        timedLeg:
          $ref: "#/components/schemas/TimedLeg"
        transferLeg:
          $ref: "#/components/schemas/TransferLeg"

    TimedLeg:
      type: object
      properties:
        legBoard:
          $ref: "#/components/schemas/LegBoard"
        legAlight:
          $ref: "#/components/schemas/LegAlight"
        service:
          $ref: "#/components/schemas/Service"

    LegBoard:
      type: object
      properties:
        stopPlace:
          $ref: "#/components/schemas/StopPlace"
        serviceDeparture:
          $ref: "#/components/schemas/DepartureDate"

    LegAlight:
      type: object
      properties:
        stopPlace:
          $ref: "#/components/schemas/StopPlace"
        serviceArrival:
          $ref: "#/components/schemas/DepartureDate"

    TransferLegSpecification:
      type: object
      required:
        - legStart
        - legEnd
      properties:
        legStart:
          $ref: "#/components/schemas/Place"
        legEnd:
          $ref: "#/components/schemas/Place"
    
    TransferLeg: ## OJP # Reduced scope
      type: object
      description: >-
        A leg which links other legs of a trip where a transfer between different places is required. Provided by OJP.
      required:
        - legStart
        - legEnd
      properties:
        transferMode:
          $ref: "#/components/schemas/TransferMode"
        legStart:
          description: Stop/Station where boarding is done
          $ref: "#/components/schemas/Place"
        legEnd:
          description: Stop/Station to alight
          $ref: "#/components/schemas/Place"
        timeWindowStart: # Inlined from TimeWindow
          description: Time at which window begins.
          type: string
          format: date-time
        timeWindowEnd: # Inlined from TimeWindow
          description: Time at which window ends.
          type: string
          format: date-time
        duration:
          description: Overall duration of this interchange.
          type: string
          format: duration
          example: "PT20M"

    TransferMode: ## OJP
      description: >-
        Modes dedicated to perform transfers. Provided by OJP.
      type: string
      x-extensible-enum:
        - WALK
        - PARK_AND_RIDE
        - BIKE_AND_RIDE
        - CAR_HIRE
        - BIKE_HIRE
        - PROTECTED_CONNECTION
        - GUARANTEED_CONNECTION
        - REMAIN_IN_VEHICLE
        - CHANGE_WITHIN_VEHICLE
        - CHECK_IN
        - CHECK_OUT
      default: WALK       

    DepartureDate:
      type: object
      properties:
        timetabledTime:
          type: string
          format: date-time

    Service:
      type: object
      properties:
        publishedServiceName:
          type: string
          example: "PE 905"
        vehicleNumber:
          type: string
          example: "905"
        operatorRef:
          type: string
          example: urn:uic:risc:1080:321
    
    StopPlace: ## OJP # Reduced scope
      type: object
      description: >-
        A place extended by accessibility limitation properties and some attributes of the associated equipment, 
        comprising one or more places where vehicles may stop and where passengers may board or leave vehicles 
        or prepare their trip, and which will usually have one or more wellknown names. Provided by OJP.
      #allOf:
      required:
        - stopPlaceRef
        - stopPlaceName
      properties:
        stopPlaceRef:
          description: Reference to a Stop Place
          $ref: "#/components/schemas/StopPlaceRef"
        stopPlaceName:
          description: Name of this stop place for use in passenger information.
          type: string
          example: Zürich HB
        # nameSuffix:  # Out of scope
        #   description: Additional description of the stop place that may be appended to the name if enough space is available.
        #   type: string
        #   example: Exhibition Center
        # privateCode:  # Out of scope
        #   description: Code of this stop place in private/foreign/proprietary coding schemes.
        #   $ref: "#/components/schemas/PrivateCode"
        # topographicPlaceRef:  # Out of scope
        #   description: If at least one is set, only place objects within the given localities are allowed.If at least one is set, only place objects within the given localities are allowed.Reference to a TopographicPlace
        #   $ref: "#/components/schemas/TopographicPlaceRef"
        # - $ref: "#/components/schemas/StopAttributes" # Out of scope

    ##

    BookingState:
      type: string
      enum:
        - PREBOOKED
        - CONFIRMED
        - CANCELLED

    PlaceSelection:
      type: object
      properties:
        passengers:
          type: array
          items:
            $ref: "#/components/schemas/Passenger"
        referencePlace:
          type: object
          description: selected place for an adjacent reservation (NEARBY)
          properties:
            placeNumber:
              type: string
            coachNumber:
              type: string

    SelectionPerLeg:
      type: object
      description: >-
        Per leg three options to select places exist:
        - selection per place properties (selectedOption)
        - selection per reference place for adjacent reservation (selectedReferencePlace)
        - selection per coach and places via a graphical place selection (selectedCoaches)
      required:
        - selectedReservationOfferId
      properties:
        selectedReservationOfferId:
          type: string
        selectedOptions:
          type: array
          items:
            $ref: "#/components/schemas/PlaceOptionsBundle"
        selectedReferencePlace:
          $ref: "#/components/schemas/PlaceSelection"
        selectedCoaches:
          type: array
          items:
            $ref: "#/components/schemas/SelectedCoaches"

    SelectedCoaches:
      type: object
      properties:
        coachNumber:
          type: string
        places:
          description: selected places in case of graphical booking
          type: array
          items:
            type: object
            properties:
              passenger:
                $ref: "#/components/schemas/Passenger"
              placeNumber:
                type: string

    PlaceOptionsBundle:
      type: object
      description: >-
        Place selection of places for reservation linked to passengers.
      properties:
        passengers:
          type: array
          items:
            $ref: "#/components/schemas/Passenger"
        placeProperties:
          description: Properties of places as defined in 90810-10.
          type: array
          items:
            $ref: "#/components/schemas/PlaceProperty"

    TupleReservedPlacePassenger:
      type: object
      properties:
        passenger:
          $ref: "#/components/schemas/Passenger"
        reservedPlacePerLeg:
          type: array
          items:
            $ref: "#/components/schemas/ReservedPlaceLeg"

    ReservedPlaceLeg:
      type: object
      properties:
        legId:
          type: string
        reservedPlace:
          $ref: "#/components/schemas/ReservedPlace"

    ReservedPlace:
      type: object
      description: A reserved place
      properties:
        id:
          type: string
          format: uuid
        accommodationType:
          $ref: "#/components/schemas/AccommodationType"
        accommodationSubType:
          $ref: "#/components/schemas/AccommodationSubType"
        vehicleNumber:
          type: string
          example: "PE 905"
        coachNumber:
          type: string
          example: 3
        placeNumber:
          type: string
          example: 33
        placeProperties:
          type: array
          items:
            $ref: "#/components/schemas/PlaceProperty"

