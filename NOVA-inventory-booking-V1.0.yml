openapi: 3.0.3

info:
  title: NOVA Inventory Booking API
  version: 1.0.0
  description: >-
    NOVA Inventory API to book places in a inventory.
  contact:
    name: Andreas Schlapbach
    email: andreas.schlapbach@sbb.ch

servers:
  - description: NOVA Inventory Booking API
    url: https://developers.sbb.ch/nova-inventory-booking

tags:
  - name: place availabilities
    description: >-
      place availability of vehicle

paths:
  /place-availabilities:
    post:
      tags:
        - place availabilities
      summary: returns place availability of a vehicle
      description: >-
        Returns availability of places. The availability can be filtered using place properties or service levels.
      operationId: getAvailabilities
      parameters:
        - $ref: "#/components/parameters/traceParent"
        - $ref: "#/components/parameters/traceState"
      requestBody:
        description: request for availability
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlaceAvailabilityRequest"
      responses:
        "200":
          description: the requested place
          headers:
            Cache-Control:
              schema:
                type: string
                default: "public, max-age=10000"
                description: >-
                  A places resource is fairly persistent and has a medium time to live to allow short-term caching.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlaceAvailabilityResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          description: unauthorized
        "403":
          description: forbidden
        "404":
          $ref: "#/components/responses/InternalServerErrorResponse"
        "500":
          description: internal server error
        "501":
          description: not implemented
        "503":
          $ref: "#/components/responses/ServiceUnavailableResponse"

security:
  - oAuth2ClientCredentials: []

components:
  securitySchemes:
    oAuth2ClientCredentials:
      type: oauth2
      description: See https://swagger.io/docs/specification/authentication/oauth2/
      flows:
        clientCredentials:
          # The token endpoint of the authorization server, needs to be specified here
          tokenUrl: "https://login.microsoftonline.com/tbd"
          scopes: {} # The scopes are not being used yet

  parameters:
    acceptLanguage:
      name: Accept-Language
      in: header
      description: >-
        Describes the set of natural languages that are preferred for localized text in the response
        to the request (see RFC2616-sec14.4). Supporting English (en) is a must.
      schema:
        type: string
      required: false

    traceParent:
      name: traceparent
      in: header
      description: >-
        The traceparent header describes the position of the incoming request in its trace graph in a portable, 
        fixed-length format. Its design focuses on fast parsing. Every tracing tool MUST properly set 
        traceparent even when it only relies on vendor-specific information in tracestate (see W3C Trace Context).
      schema:
        type: string
      required: false

    traceState:
      name: tracestate
      in: header
      description:
        The tracestate extends traceparent with vendor-specific data represented by a set of name/value pairs.
        Storing information in tracestate is optional (see W3C Trace Context).
      schema:
        type: string
      required: false

  responses:
    BadRequestResponse:
      description: Bad Request (400)
      content:
        "application/problem+json":
          schema:
            $ref: "#/components/schemas/Problem"

    ConflictResponse:
      description: Conflict (409)
      content:
        "application/problem+json":
          schema:
            $ref: "#/components/schemas/Problem"

    InternalServerErrorResponse:
      description: Internal Server Error (500)
      content:
        "application/problem+json":
          schema:
            $ref: "#/components/schemas/Problem"

    ServiceUnavailableResponse:
      description: Service Unavailable (503)
      content:
        "application/problem+json":
          schema:
            $ref: "#/components/schemas/Problem"

  schemas:
    PlaceAvailabilityRequest:
      type: object
      additionalProperties: false
      required:
        - tripSpecifications
        - passengerSpecifications
      properties:
        tripSpecifications:
          type: array
          items:
            $ref: "#/components/schemas/TripSpecification"
        passengerSpecifications:
          type: array
          items:
            $ref: "#/components/schemas/PassengerSpecification"
        embeddedParts:
          type: string
          enum:
            - PLACE_AVAILABILITIES
            - ALL
          default: ALL

    PlaceAvailabilityResponse:
      type: object
      additionalProperties: false
      required:
        - tripAvailabilities
      properties:
        warnings:
          $ref: "#/components/schemas/WarningCollection"
        tripAvailabilities:
          type: array
          items:
            $ref: "#/components/schemas/TripAvailability"

    TripAvailability:
      type: object
      additionalProperties: false
      description: >-
        Availability per leg for a given trip.
      required:
        - tripId
      properties:
        tripId:
          type: string
        placeAvailabilities:
          type: array
          items:
            $ref: "#/components/schemas/PlaceAvailability"
        reservationOffers:
          type: array
          items:
            $ref: "#/components/schemas/ReservationOffer"

    ReservationOffer:
      type: object
      additionalProperties: false
      required:
        - id
        - productCode
        - price
        - placeAvailabilityId
      properties:
        id:
          type: string
        productCode:
          type: string
          description: >-
            The product code expressed in the provider system (could be a
            mapping from an even lower-level provider).
          example: Reservierungsentgelt
        price:
          type: object
          $ref: "#/components/schemas/Price"
        availableFulfillmentTypes:
          type: array
          items:
            $ref: "#/components/schemas/FulfillmentType"
        placeAvailabilityId:
          type: string

    PlaceAvailability:
      type: object
      additionalProperties: false
      required:
        - id
        - legId
        - passengerIds
        - inventory
        - accommodationType
        - accommodationSubType
      properties:
        id:
          type: string
          example: "id-1"
        legId:
          type: string
          example: "leg-1"
        passengerIds:
          type: array
          items:
            type: string
            example: "passenger-1"
        inventory:
          $ref: "#/components/schemas/Inventory"
        comfortClass:
          $ref: "#/components/schemas/ComfortClass"
        accommodationType:
          $ref: "#/components/schemas/AccommodationType"
        accommodationSubType:
          $ref: "#/components/schemas/AccommodationSubType"
        numericAvailability:
          description: number of places
          type: integer
          format: int32
          example: 22
        availablePlaceProperties:
          type: array
          items:
            $ref: "#/components/schemas/PlaceProperty"

    Inventory:
      type: string
      x-extensible-enum:
        - CAPRE
        - RESSYS

    ##

    TripSpecification:
      type: object
      additionalProperties: false
      description: >-
        A minimal trip specification from origin to destination.
      required:
        - id
        - legs # EXT replaces tripLegs, fix to OJP submitted, see https://github.com/VDVde/OJP/issues/179
      properties:
        id:
          description: >-
            Id of this trip for referencing purposes. Unique within a trip specification.
          type: string
        legs:
          type: array
          items:
            $ref: "#/components/schemas/TripLegSpecification"
          minItems: 1

    TripLegSpecification:
      type: object
      additionalProperties: false
      description: >-
        A minimal trip leg specification consisting of timed and transfer legs only. 
        Continuous legs are not yet part of this version of the specification-
      required:
        - id ## EXT replaces legId, fix to OJP submitted, see https://github.com/VDVde/OJP/issues/181
      properties:
        id:
          description: Id of this trip leg. Unique within trip result. A seqId is a leg id.
          type: string
        timedLeg:
          $ref: "#/components/schemas/TimedLegSpecification"
        transferLeg:
          $ref: "#/components/schemas/TransferLeg"
        # continuousLeg:
        #   $ref: "#/components/schemas/ContinuousLeg"

    TimedLegSpecification:
      type: object
      additionalProperties: false
      description: >-
        A minimal timed leg specification.
      required:
        - alight # EXT renamed timedAlight
        - board # EXT renamed timedBoard
        - service
      properties:
        board:
          $ref: "#/components/schemas/LegBoardSpecification"
        intermediates:
          type: array
          items:
            $ref: "#/components/schemas/LegIntermediateSpecification"
        alight:
          $ref: "#/components/schemas/LegAlightSpecification"
        service:
          $ref: "#/components/schemas/DatedJourney"

    TransferLeg: ## OJP # Reduced scope
      type: object
      additionalProperties: false
      description: >-
        A leg which links other legs of a trip where a transfer between different places is required. 
        Provided by OJP.
      required:
        - start # EXT renamed legStart
        - end # EXT renamed legEnd
      properties:
        continuousMode:
          $ref: "#/components/schemas/ContinuousMode"
        transferMode:
          $ref: "#/components/schemas/TransferMode"
        start:
          description: Stop/Station to board.
          $ref: "#/components/schemas/PlaceRef"
        end:
          description: Stop/Station to alight
          $ref: "#/components/schemas/PlaceRef"
        timeWindowStart: # Inlined from TimeWindow
          description: Time at which window begins.
          type: string
          format: date-time
        timeWindowEnd: # Inlined from TimeWindow
          description: Time at which window ends.
          type: string
          format: date-time
        duration:
          description: Overall duration of this interchange.
          type: string
          format: duration
          example: "PT20M"
        # walkDuration:  # Out of scope
        #   description: Walk time as part of the overall interchange duration.
        #   type: string
        #   format: duration
        #   example: "PT20M"
        # bufferTime:  # Out of scope
        #   description: Buffer time as part of the overall interchange duration. Buffer times, f.e. check in/out times, sometimes are mandatory for using certain services as f.e. airplanes, ferries or highspeed trains.
        #   type: string
        #   format: duration
        #   example: "0SM"
        # legDescription:  # Out of scope
        #   type: string
        # length:  # Out of scope
        #   type: number
        #   minimum: 0
        # attribute:  # Out of scope
        #   $ref: "#/components/schemas/GeneralAttribute"
        # pathGuidance:  # Out of scope
        #   $ref: "#/components/schemas/PathGuidance"
        situationFullRef:
          type: array
          items:
            $ref: "#/components/schemas/SituationFullRef"

    LegBoardSpecification:
      type: object
      additionalProperties: false
      description: Minimal leg board specification.
      required:
        - stopPlaceRef ## EXT stopPlaceRef instead of stopPointRef
        - serviceDeparture
      properties:
        stopPlaceRef:
          $ref: "#/components/schemas/StopPlaceRef" ## EXT stopPlaceRef instead of stopPointRef
        stopPlaceName:
          type: string
          example: Luzern
        serviceDeparture:
          description: >-
            Describes the departure situation at this leg board stop point (group of attributes
            of timetabled passing time, estimated passing time, observed passing time).
          $ref: "#/components/schemas/ServiceTime"

    LegIntermediateSpecification:
      type: object
      additionalProperties: false
      description: Minimal leg intermediate specification.
      required:
        - stopPlaceRef ## EXT stopPlaceRef instead of stopPointRef
        - serviceArrival
        - serviceDeparture
      properties:
        stopPlaceRef:
          $ref: "#/components/schemas/StopPlaceRef" ## EXT stopPlaceRef instead of stopPointRef
        stopPlaceName:
          type: string
          example: Luzern
        serviceArrival:
          description: >-
            Describes the arrival situation at this leg board stop point (group of attributes
            of timetabled passing time, estimated passing time, observed passing time).
          $ref: "#/components/schemas/ServiceTime"
        serviceDeparture:
          description: >-
            Describes the departure situation at this leg board stop point (group of attributes
            of timetabled passing time, estimated passing time, observed passing time).
          $ref: "#/components/schemas/ServiceTime"

    LegAlightSpecification:
      type: object
      additionalProperties: false
      description: Minimal leg alight specification
      required:
        - stopPlaceRef ## EXT stopPlaceRef instead of stopPointRef
        - serviceArrival
      properties:
        stopPlaceRef:
          $ref: "#/components/schemas/StopPlaceRef" ## EXT stopPlaceRef instead of stopPointRef
        stopPlaceName:
          type: string
          example: Luzern
        serviceArrival:
          description: >-
            Describes the arrival situation at this leg board stop point (group of attributes
            of timetabled passing time, estimated passing time, observed passing time).
          $ref: "#/components/schemas/ServiceTime"

    ServiceTime: ## OJP
      type: object
      additionalProperties: false
      description: >-
        Contains at least scheduled time, but can contain real time and estimated times. Provided by OJP.
      required:
        - timetabledTime
      properties:
        timetabledTime:
          type: string
          format: date-time
        estimatedTime:
          type: string
          format: date-time
        observedTime:
          type: string
          format: date-time

    DatedJourney: ## OJP # Reduced scope
      type: object
      additionalProperties: false
      description: >-
        Vehicle journey that runs at a specific date. Provided by OJP.
      required:
        # - operatingDayRef
        # - journeyRef
        # - mode
        # - publishedServiceName # EXT
        # - privateMode # EXT
        - operatorRefs
        # - originText
        # - destinationText
      properties:
        operatingDayRef:
          $ref: "#/components/schemas/OperationDayRef"
        # journeyRef:  # Out of scope
        #   $ref: "#/components/schemas/JourneyRef"
        mode:
          $ref: "#/components/schemas/Mode"
        productCategory:
          $ref: "#/components/schemas/ProductCategory"
        publishedServiceName:
          description: >-
            Line name or service description as known to the public, f.e. "512", "S8"
            or "Circle Line" or "ICE 488".
          type: string
          example: S1
        vehicleNumbers: # EXT Fix to OJP submitted, see https://github.com/VDVde/OJP/issues/173
          description: >-
            The vehicle number(s) of the vehicle(s) that runs this timed leg.
            On some legs a vehicle has multiple vehicles, e.g. if it is split into two
            trains at a intermediate stop.

            For backwards compatibility with Hermes/Hosa the length of the string must be restricted
            to 5 characters. If's longer, it is not possible to use the H2O converter.
          type: array
          items:
            type: string
            example:
              - "9218"
              - "9340"
              - "15"
        lineNumbers:
          description: >-
            List of line numbers that are part of this journey.
            Especially on regional traffic, a vehicle is defined by a line number only.
          type: array
          items:
            type: string
            example:
              - "52"
              - "19"
        operatorRefs:
          description: >-
            Reference to transport operators.
            For UIC see: https://unioninternationalcheminsdefer.github.io/OSDM/spec/catalog-of-code-lists/

            As a leg can be operated by more than operator we model it as an array here.
          type: array
          items:
            type: string
            example:
              "urn:uic:rics:1185:000011"
        serviceStatus:
          $ref: "#/components/schemas/ServiceStatus"
        situationFullRefs:
          type: array
          items:
            $ref: "#/components/schemas/SituationFullRef"

    Mode: ## OJP
      type: object
      additionalProperties: false
      description: >-
        A method of transportation such as bus, rail, etc. Provided by OJP.
      required:
        - ptMode
      properties:
        ptMode: # EXT
          description: >-
            Subset of SIRI Modes which are sensible.
            TAP-TSI/UIC: Transport Mode  TODO: Align with SIRI
          type: string
          x-extensible-enum:
            - HIGH_SPEED_TRAIN
            - HISTORIC_TRAIN
            - INTERCITY
            - REGIONAL
            - INTERREGIONAL
            - URBAN
            - TRAM
            - UNDERGROUND
            - NIGHT_TRAIN
            - SHARED_TAXI
            - MOTOR_RAIL
            - MOUNTAIN_TRAIN
            - PLANE
            - COACH_GROUP
            - SHIP
            - BUS

          #  $ref: "#/components/schemas/PtModeChoiceGroup"
        name:
          description: Name of the mode
          type: string
          example: rail
        shortName:
          description: Short name or acronym of the mode
          type: string
          example: S
        description:
          description: Additional text that further describes the mode
          type: string

    ProductCategory: ## OJP
      type: object
      additionalProperties: false
      description: >-
        Product category based on NeTEx/SIRI. A product category is a classification for vehicle journeys
        to express some common properties of journeys for marketing and fare products. Provided by OJP.
      required:
        - name
        - shortName
        - productCategoryRef
      properties:
        name:
          description: >-
            Full name of this product category, e.g. "TGV Lyria" in Switzerland and France.
            UIC: Long name of Service Brand
          type: string
          example: TGV Lyria
        shortName:
          description: >-
            Short name or acronym of the product category, likely to be published, e.g. "TGV"
            UIC: Abbreviation of Service Brand
          type: string
          example: TGV
        productCategoryRef:
          $ref: "#/components/schemas/ProductCategoryRef"

    ServiceStatus:
      type: object
      additionalProperties: false
      description: >-
        Parameters which describe the current status of a dated vehicle journey.
        Provided by OJP.
      properties:
        unplanned:
          type: boolean
          description: Whether this trip is an additional one that has not been planned.
          default: false
        cancelled:
          type: boolean
          description: Whether this trip is cancelled and will not be run.
          default: false
        deviation:
          type: boolean
          description: Whether this trip deviates from the planned service pattern.
          default: false
        occupancy:
          type: string
          description: >-
            Passenger load status on vehicle. If omitted, not known. 
            Equivalent to siri:OccupancyEnumeration which describes three values: 
            "full", "seatingAvailable" and "standingAvailable".

    ContinuousMode: ## OJP
      type: string
      description: Types of modes that run at any time without a timetable. Provided by OJP.
      x-extensible-enum:
        - WALK
        - DEMAND_RESPONSIVE
        - REPLACEMENT_SERVICE

    TransferMode: ## OJP
      type: string
      description: Modes dedicated to perform transfers. Provided by OJP.
      x-extensible-enum:
        - WALK
        - PARK_AND_RidE
        - BIKE_AND_RidE
        - CAR_HIRE
        - BIKE_HIRE
        - PROTECTED_CONNECTION
        - GUARANTEED_CONNECTION
        - REMAIN_IN_VEHICLE
        - CHANGE_WITHIN_VEHICLE
        - CHECK_IN
        - CHECK_OUT
      default: WALK

    PlaceRef: ### OJP
      oneOf:
        - $ref: "#/components/schemas/StopPlaceRef"
        - $ref: "#/components/schemas/TopographicPlaceRef"
        - $ref: "#/components/schemas/PointOfInterestRef"
        - $ref: "#/components/schemas/AddressRef"
        - $ref: "#/components/schemas/FareConnectionPointRef"
        - $ref: "#/components/schemas/GeoPosition"
      required:
        - name
      properties:
        name:
          type: string

    StopPlaceRef: ## OJP
      type: string
      description: >-
        Reference to a Stop Place using URNs to define code.
        For UIC see UIC MERITS/TAP-TSI station codes. Provided by OJP.
      example:
        "urn:uic:stn:8503000"

    PointOfInterestRef: ## OJP
      type: string
      description: Reference to a Point of Interest

    TopographicPlaceRef: ## OJP
      type: string
      description: Reference to a Topographic Place

    AddressRef: ## OJP
      type: string
      description: Reference to an Address

    FareConnectionPointRef: ## OSDM extension
      type: string
      description: Reference to a Fare Connection Point

    SituationFullRef: ## OJP
      type: string
      additionalProperties: false
      description: >-
        Reference to situation message. Message details might be found in response 
        context or through other communication channels. Provided by OJP.

    ProductCategoryRef: ## OJP
      description: >-
        Reference to a product category. Product categories should be defined once and used
        uniformly in all channels (e.g. NeTEx, SIRI, OJP). Provided by OJP.
      type: string
      example:
        "urn:uic:sbc:76"

    OperationDayRef: ## OJP
      type: string
      description: Reference to an operating day. Provided by OJP.
      example: "OperatingDay:12345"

    ## Passenger Part

    PassengerSpecification:
      type: object
      additionalProperties: false
      description: >-
        Minimal specification of a passenger to request offers.
      required:
        - id
        - type
      properties:
        id:
          type: string
          description: >-
            Id of the passenger resource in case service to patch a single passenger is provided.
        externalReference:
          description: >-
            A stable reference to passengers from other elements, or from caller system.
            When received in input of a trip-offers-collection request, it must be echoed back in the
            response.
          type: string
          example: "TK-id-12345"
        type:
          $ref: "#/components/schemas/PassengerType"
        dateOfBirth:
          description: >-
            Date of birth of the passenger. Only needed for passengers of type persons, family child, PRMS
            and wheelchair.
          type: string
          format: date
        cards:
          description: reduction or loyalty cards owned by the passenger
          type: array
          items:
            $ref: "#/components/schemas/CardReference"
        prmNeeds:
          type: array
          description: >-
            For the persons with reduced mobility (PRMs) its specific needs for support are expressed.
          items:
            $ref: "#/components/schemas/PRMNeedType"

    PassengerType:
      type: string
      description: >-
        Passenger type according to UIC passenger, i.e. passenger type list.
        See https://unioninternationalcheminsdefer.github.io/OSDM/spec/catalog-of-code-lists/
      x-extensible-enum:
        - DOG
        - PET
        - LUGGAGE
        - PRM
        - BICYCLE
        - PRAM
        - ACCOMP_DOG
        - CAR
        - PERSON
        - MOTOCYCLE
        - TRAILER
        - FAMILY_CHILD
        - WHEELCHAR
      example: PERSON
      default: PERSON

    CardReference:
      type: object
      additionalProperties: false
      required:
        - types
        - code
      properties:
        types:
          description: Types of card. One card can have multiple roles, such as loyalty and reduction
          type: array
          items:
            $ref: "#/components/schemas/CardType"
        code:
          description: Code of the card type according to issuer.
          type: string
        name:
          description: Card name for printing on fulfillments.
          type: string
        number:
          description: Unique number identifying the card.
          type: string
        issuer:
          $ref: "#/components/schemas/Company"

    PRMNeedType:
      type: string
      x-extensible-enum:
        - NEED_PRM_SUPPORT
        - WHEELCHAIR
        - ACCOMPANYING_DOG
        - COMPANION_SEAT
        - COMPANION

    CardType:
      type: string
      x-extensible-enum:
        - REDUCTION_CARD
        - LOYALTY_CARD
        - CHIP_CARD
        - PASS
      default: REDUCTION_CARD

    Company:
      type: string
      description: RICS company code or compatible ERA company code for rail.
      example: 
        "urn:uic:rics:1185"

    ## Offer Part

    PlaceProperty:
      type: string
      description: see code list

    AccommodationType:
      type: string
      description: >-
        Accommodation type definition out of the Accommodation Type Code List
      default: SEAT

    AccommodationSubType:
      type: string
      description: >-
        Accommodation type definition out of the Accommodation Sub Type Code List

    ComfortClass:
      type: string
      description: >-
        Generic class classification, mostly used to harmonize choice and
        representation across multiple carriers.
      x-extensible-enum:
        - FIRST
        - SECOND

    Flexibility:
      type: string
      x-extensible-enum:
        - FULLFLEX
        - SEMIFLEX
        - NONFLEX

    Price:
      type: object
      additionalProperties: false
      required:
        - currency
        - amount
      properties:
        currency:
          $ref: "#/components/schemas/Currency"
        amount:
          description: amount in cents
          type: integer
          format: int32
        scale:
          description: scale of the amount - the number of positions after the comma
          type: integer
          format: int32
          default: 2
        vats:
          type: array
          items:
            $ref: "#/components/schemas/VAT"

    Currency:
      type: string
      description: ISO 4217 currency codes
      example:
        - CHF
        - EUR
        - SEK

    VAT:
      type: object
      additionalProperties: false
      required:
        - countryCode
        - amount
      properties:
        countryCode:
          $ref: "#/components/schemas/CountryCode"
        amount:
          description: amount in cents
          type: integer
          format: int32
          example: 5
        scale:
          description: scale of the amount - the number of positions after the comma
          type: integer
          format: int32
          default: 2
        percentage:
          type: number
          format: float
        taxId:
          type: string
        scope:
          $ref: "#/components/schemas/VatScope"

    VatScope:
      type: string
      description: scope where the VAT applies
      x-extensible-enum:
        - INTERNATIONAL
        - NATIONAL
        - SHORT_DISTANCE
        - LONG_DISTANCE

    FulfillmentType:
      type: string
      x-extensible-enum:
        - ETICKET
        - CIT_PAPER
        - PASS_CHIP
        - PASS_REFERENCE

    #### Common elements start
    ## Referenced by distributor as well as allocator part

    CountryCode:
      type: string
      description: ISO country code (2 alpha), relative URNs with base urn:iso:std:iso:3166 are recommended
      example: DE

    GeoPosition:
      type: object
      additionalProperties: false
      description: >-
        WGS84 coordinates position. Provided by OJP.
      required:
        - latitude
        - longitude
      properties:
        longitude:
          $ref: "#/components/schemas/Longitude"
        latitude:
          $ref: "#/components/schemas/Latitude"
        # altitude:   # Out of scope
        #   $ref: "#/components/schemas/Altitude"
        # precision:   # Out of scope
        #   $ref: "#/components/schemas/Precision"

    Longitude:
      type: number
      description: Longitude from Greenwich Meridian. -180 (West) to +180 (East). Decimal degrees. eg 2.356.
      format: float
      example: 8.54021
      minimum: -180.0
      maximum: 180.0

    Latitude:
      type: number
      description: Latitude from equator. -90 (South) to +90 (North). Decimal degrees. eg 56.356.
      format: float
      example: 47.37818
      minimum: -90.0
      maximum: 90.0

    Link:
      type: object
      description: >-
        The underlying system may provide links for pagination of links pointing on 
        further information (such as HTML download links, web sites or extended APIs).
        Mechanism to add flexible extensions specific to an underlying system. Implemented
        the JSON-HAL specification.
      additionalProperties:
        $ref: "#/components/schemas/LinkObject"

    LinkObject:
      type: object
      additionalProperties: false
      required:
        - href
      properties:
        type:
          type: string
          description: >-
            Hint to indicate the media type expected when dereferencing the target resource.
          example: application/json
        href:
          type: string
          format: uri
          description: A URI
          example:
            - "https://api.osdm.com/trips-collections/12345?cursor=2"
            - "https://api.osdm.com/trips-collections/12345?cursor=0"

    WarningCollection:
      type: array
      description: >-
        List of warnings.
      items:
        $ref: "#/components/schemas/Warning"

    Warning:
      type: object
      additionalProperties: false
      description: >-
        This element can be used to pass non-blocking information or events,
        such as a price difference with the initially offered price at booking time. 
        It is inspired on the JSon problem structure.
      required:
        - code
      properties:
        code:
          type: string
        type:
          type: string
          format: uri
          description: >-
            An absolute URI that identifies the warning type. When dereferenced,
            it SHOULD provide human-readable documentation for the problem type
            (e.g., using HTML).
          default: "about:blank"
          example: "https://example.com/warns/price-updated"
        detail:
          type: string
          description: >-
            A human readable explanation specific to this occurrence of the
            warning.
          example: The price of the given offer part has been updated during the booking operation
        instance:
          type: string
          format: uri
          description: >-
            An absolute URI that identifies the specific occurrence of the warning.
            example: offers/offer1234

    Problem:
      type: object
      additionalProperties: false
      description: >-
        Problem Details for HTTP APIs (RFC 7807) defines a "problem detail" as a way
        to carry machine-readable details of errors in a HTTP response to avoid
        the need to define new error response formats for HTTP APIs.
        See: https://tools.ietf.org/html/rfc7807
      properties:
        type:
          type: string
          format: uri
          description: >-
            An absolute URI that identifies the problem type. When dereferenced,
            it SHOULD provide human-readable documentation for the problem type
            (e.g., using HTML).
          default: "about:blank"
          example: "https://example.com/probs/passenger-too-young"
        title:
          type: string
          description: >-
            A short, summary of the problem type. Written in English and readable
            for engineers (usually not suited for non technical stakeholders and
            not localized); example: Service Unavailable
        status:
          type: integer
          format: int32
          description: >-
            The HTTP status code generated by the origin server for this occurrence
            of the problem.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
          example: 503
        detail:
          type: string
          description: >-
            A human readable explanation specific to this occurrence of the
            problem.
          example: Connection to database timed out
        instance:
          type: string
          format: uri
          description: >-
            An absolute URI that identifies the specific occurrence of the problem.
